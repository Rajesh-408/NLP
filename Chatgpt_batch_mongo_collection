from pymongo import MongoClient

# Helper function to recursively convert dictionaries to tuples
def convert_to_hashable(item):
    if isinstance(item, dict):
        return tuple((key, convert_to_hashable(value)) for key, value in item.items())
    if isinstance(item, list):
        return tuple(convert_to_hashable(value) for value in item)
    return item

# Establish a connection to the MongoDB instance
client = MongoClient('mongodb://localhost:27017/')

# Replace 'your_db_name' and 'your_collection_name' with actual names
db = client['your_db_name']
collection = db['your_collection_name']

# Initialize a set to store unique hashable values
unique_values = set()

# Iterate through the documents in the collection
for document in collection.find():
    # Iterate through the values in each document
    for value in document.values():
        # Convert value to hashable type and add to the set
        hashable_value = convert_to_hashable(value)
        unique_values.add(hashable_value)

# Close the MongoDB connection
client.close()

# Print the unique values
for value in unique_values:
    print(value)
