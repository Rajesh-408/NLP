import pandas as pd
import re

# Define the data as a list of strings
data = [
    "[('doc.data.benefits[118].notes[0].structure[0].text', 'DOES NOT include removal of impacted teeth.')]\n",
    "[('doc.data.benefits[25].notes[0].structure[0].text', 'Includes Autism Spectrum Disorder, Intellectual Disability, Developmental Delays and Learning Disabilities')]\n",
    "[('doc.data.benefits[70].related.services[1].type', 'inclusion'), ('doc.data.benefits[70].related.services[1].name', 'Ancillaries')]\n",
    # Add more data entries as needed
]

# Initialize lists to store extracted values
text_values = []
inclusion_values = []
exclusion_values = []

# Define regular expressions to extract values
text_pattern = r"'doc\.data\.benefits\[\d+\]\.notes\[\d+\]\.structure\[\d+\]\.text', '([^']*)'"
inclusion_pattern = r"'doc\.data\.benefits\[\d+\]\.related\.services\[\d+\]\.type', 'inclusion'\), \('doc\.data\.benefits\[\d+\]\.related\.services\[\d+\]\.name', '([^']*)'"
exclusion_pattern = r"'doc\.data\.benefits\[\d+\]\.related\.services\[\d+\]\.type', 'exclusion'\), \('doc\.data\.benefits\[\d+\]\.related\.services\[\d+\]\.name', '([^']*)'"

# Iterate through the data and extract values
for item in data:
    text_match = re.search(text_pattern, item)
    inclusion_match = re.search(inclusion_pattern, item)
    exclusion_match = re.search(exclusion_pattern, item)

    # Extract and append values or None if not found
    text_values.append(text_match.group(1) if text_match else None)
    inclusion_values.append(inclusion_match.group(1) if inclusion_match else None)
    exclusion_values.append(exclusion_match.group(1) if exclusion_match else None)

# Create a DataFrame
df = pd.DataFrame({
    "text": text_values,
    "inclusion": inclusion_values,
    "exclusion": exclusion_values
})

# Print the DataFrame
print(df)



import pandas as pd
import ast

# Define the data as a list of strings
data = [
    "[('doc.data.benefits.text', 'auxiliary')]\n",
    "[('doc.data.benefits.type', 'inclusion'),('doc.data.benefits.name', 'coinsurance')]\n",
    "[('doc.data.benefits.type', 'exclusion'),('doc.data.benefits.name', 'copayment')]\n"
]

# Define a function to extract values from the string representation of tuples
def extract_value(data_str, key):
    try:
        data_list = ast.literal_eval(data_str)
        for item in data_list:
            if item[0] == key:
                return item[1]
    except (SyntaxError, ValueError):
        pass
    return None

# Extract values for each column
text_values = [extract_value(item, 'doc.data.benefits.text') for item in data]
inclusion_values = [extract_value(item, 'doc.data.benefits.type') for item in data]
exclusion_values = [extract_value(item, 'doc.data.benefits.name') for item in data]

# Create a DataFrame
df = pd.DataFrame({
    "text": text_values,
    "inclusion": inclusion_values,
    "exclusion": exclusion_values
})

# Print the DataFrame
print(df)
